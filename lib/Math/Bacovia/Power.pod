=encoding utf8

=head1 NAME

Math::Bacovia::Power - Represents a symbolic exponentiation in a symbolic base.

=head1 SYNOPSIS

    use 5.014;
    use Math::Bacovia qw(Power Symbol);

    my $f = Power(Symbol('a'), Symbol('b'));
    my $g = Power(Symbol('x'), Symbol('y'));

    say (($f + $g)->pretty);    #=> (a^b + x^y)

=head1 METHODS

This section describes the methods provided by the B<Math::Bacovia::Power> module.

=head2 new

    my $obj = Math::Bacovia::Power->new($base, $exponent);

Constructs and returns a new B<Math::Bacovia::Power> object.

=head2 get

    my ($base, $exponent) = $obj->get;

Returns the internal values of the self-object.

=head2 mul

    $x * $y
    $x->mul($y)

Product of C<x> and C<y>.

When the base of C<x> and C<y> are symbolically equivalent, the following identity is used:

    a^b * a^c = a^(b + c)

=head2 div

    $x / $y
    $x->div($y)

Division of C<x> by C<y>.

When the base of C<x> and C<y> are symbolically equivalent, the following identity is used:

    a^b / a^c = a^(b - c)

=head2 inv

    $x->inv

Multiplicative inverse of C<x>, using the indentity:

    1/a^b = a^(-b)

=head2 eq

    $x == $y
    $x->eq($y)

Return a true value when C<x> and C<y> are symbolically equal.

=head1 SPECIAL METHODS

This section describes the special methods provided by the B<Math::Bacovia::Power> module.

=head2 alternatives

    my @alt = $obj->alternatives;
    my @alt = $obj->alternatives(full => 1);

This method uses common mathematical identities to create symbolically equivalent expressions from the self-expression.

=head2 pretty

    my $str = $obj->pretty;

Returns a human-readable stringification of the self-expression.

=head2 stringify

    my $str = $obj->stringify;

Returns a stringification of the self-expression.

=head2 numeric

    my $num = $obj->numeric;

Evaluates the self-expression numerically and returns a L<Math::AnyNum> object.

=head1 SEE ALSO

The other parts of B<Math::Bacovia>:

=over 4

=item * L<Math::Bacovia>

=item * L<Math::Bacovia::Fraction>

=item * L<Math::Bacovia::Difference>

=item * L<Math::Bacovia::Log>

=item * L<Math::Bacovia::Exp>

=item * L<Math::Bacovia::Sum>

=item * L<Math::Bacovia::Product>

=item * L<Math::Bacovia::Number>

=item * L<Math::Bacovia::Symbol>

=back

=head1 REPOSITORY

L<https://github.com/trizen/Math-Bacovia>

=head1 AUTHOR

Daniel Șuteu, C<< <trizen at cpan.org> >>

=head1 COPYRIGHT AND LICENSE

Copyright (C) 2017-2019 Daniel Șuteu

This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.22.0 or,
at your option, any later version of Perl 5 you may have available.

=cut
